- name: Update apt cache
  apt:
    update_cache: yes

- name: Check Kafka broker availability
  command: "nc -z {{ kafka_host }} 9092"
  register: kafka_check
  failed_when: kafka_check.rc != 0

- name: Install Python & pip
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - python3
    - python3-pip
    - python3-venv

- name: Create directory for producer
  file:
    path: "{{ producer_script_dest }}"
    state: directory
    mode: '0755'

- name: Copy requirements.txt to the target machine
  copy:
    src: requirements.txt
    dest: "{{ producer_script_dest }}/requirements.txt"

- name: Install Python requirements
  pip:
    requirements: "{{ producer_script_dest }}/requirements.txt"
    executable: pip3

- name: Copy producer script template
  template:
    src: producer.py.j2
    dest: "{{ producer_script_dest }}/producer.py"
    mode: '0755'

- name: "Install systemd service {{ kafka_topic }}"
  template: 
    src: "{{ kafka_topic }}.service.j2" 
    dest: "/etc/systemd/system/{{ kafka_topic }}.service"
    owner: root 
    group: root 
    mode: '0640' 

- name: Reload systemd to recognize new service
  systemd:
    daemon_reload: yes

- name: Enable and start news-producer service
  systemd:
    name: "{{ kafka_topic }}.service"
    state: started
    enabled: yes

- name: Check if news-producer service is running
  systemd:
    name: "{{ kafka_topic }}.service"
    state: started
  register: service_status
  until: service_status.status.ActiveState == "active"
  retries: 5
  delay: 5


#- name: Run Kafka producer
#  command: "python3 {{ producer_script_dest }}/producer.py >> /tmp/producer.log 2>&1 &"
#  environment:
#    NEWS_API_KEY: "{{ news_api_key }}"
# async: 1      # Set >0 if you want to background it
#  poll: 0       # Don't wait for completion- name: Reload systemd
#  systemd:
#   daemon_reload: yes
